import {
  faCcDiscover,
  faCcMastercard,
  faCcVisa,
} from "@fortawesome/free-brands-svg-icons";
import {
  faCalendarDays,
  faCheck,
  faCreditCard,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { useState } from "react";
import "../../styles/Modal-Styles/CreateCardModal.css";

function CreateCardModal({
  setIsCreateCardModalOpen,
  setCardInfo,
  userFirstName,
  userLastName,
}) {
  const [newCard, setNewCard] = useState({
    cardType: null,
    cardNumber: "XXXX XXXX XXXX XXXX",
    expiryDate: "MM/YY",
    cvv: "XXX",
    cardHolder: `${userFirstName} ${userLastName}`,
  });
  const [message, setMessage] = useState("");
  const [acknowledgeDisclaimer, setAcknowledgeDisclaimer] = useState(false);
  const [isCardGenerated, setIsCardGenerated] = useState(false);

  // An array containing different card types.
  const cardTypes = ["Visa", "MasterCard", "Discover"];

  /**
   * This function generates a valid card number based on the cardType using the Luhn Algorithm.
   *
   * The Luhn Algorithm, in the context of credit card numbers, serves two main purposes:
   * 1. It adds an extra layer of validation by incorporating a check digit at the end of the card number.
   * 2. It helps avoid simple data entry errors such as transpositions.
   *
   * The Luhn Algorithm is used to validate credit card numbers and operates as follows:
   * 1. Starting from the rightmost digit (excluding the check digit), moving left, double the value of every second digit.
   *    If the result of this doubling operation is greater than 9 (e.g., 8 * 2 = 16), then add the digits of the product (e.g., 16: 1 + 6 = 7).
   * 2. Take the sum of all the digits.
   * 3. If the total ends in zero then the number is valid according to the Luhn formula; otherwise, it is not valid.
   *
   * In this implementation, the cardType informs two aspects of the generated number:
   * - The starting digit(s) which generally signifies the card network. For instance, Visa cards start with 4, MasterCards with 5, and Discover with 6.
   * - The length of the card number. In this case, all generated card numbers are set to have 16 digits.
   */
  function generateLuhnNumber(cardType) {
    // An object that maps cardTypes to their respective lengths.
    const lengths = { Visa: 16, MasterCard: 16, Discover: 16 };

    // An object that maps cardTypes to arrays containing valid starting digits.
    // Visa: Visa cards generated by this function start with 4 and have 16 digits.
    // MasterCard: MasterCard cards generated by this function start with 5 and have 16 digits.
    // Discover: Discover cards generated by this function start with 6 and have 16 digits.
    const starts = { Visa: [4], MasterCard: [5], Discover: [6] };

    // Select a random starting digit for the cardType.
    let start =
      starts[cardType][Math.floor(Math.random() * starts[cardType].length)];

    // Convert the starting digit to a string to allow string concatenation later.
    let card = start.toString();

    // Retrieve the length of card numbers for the cardType.
    const length = lengths[cardType];

    // Generate the main part of the card number (not including the Luhn check digit).
    for (let i = card.length; i < length - 1; i++) {
      card += Math.floor(Math.random() * 10); // add a random digit from 0-9
    }

    // Calculate the Luhn check digit.
    let sum = 0; // stores the running sum
    let parity = length % 2; // checks if the length is odd or even
    for (let i = 0; i < length - 1; i++) {
      let digit = parseInt(card[i]); // get the i-th digit

      // double every other digit, starting with the rightmost (parity indicates where to start)
      if (i % 2 == parity) {
        digit *= 2;
        if (digit > 9) {
          // if the result is two digits, subtract 9
          digit -= 9;
        }
      }
      sum += digit; // add the processed digit to the sum
    }

    // calculate and add the Luhn check digit to the end of the card number
    card += (10 - (sum % 10)) % 10;

    return card; // return the complete card number
  }

  // This function generates a fictional expiry date that is 1 year from the current month.
  function generateExpiryDate() {
    const today = new Date(); // get the current date and time
    const month = ("0" + (today.getMonth() + 1)).slice(-2); // get the current month (0-11), add 1, pad with 0 if necessary
    const year = today.getFullYear().toString().slice(-2); // get the last 2 digits of the current year
    return `${month}/${parseInt(year) + 1}`; // return the expiry date in MM/YY format
  }

  // This function generates a fictional CVV number (3 digits).
  function generateCVV() {
    return Math.floor(100 + Math.random() * 900); // generate a random number from 100-999
  }

  // This function formats a card number by adding a space after every 4 digits.
  function formatCardNumber(cardNumber) {
    return cardNumber.replace(/(\d{4})/g, "$1 ").trim(); // use a regular expression to add spaces, then remove trailing spaces
  }

  // This function generates a new card and updates the newCard state.
  function generateCard() {
    // Set state that tracks if a card has been generated yet or not
    setIsCardGenerated(true);

    // randomly select a cardType
    const cardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];
    console.log(cardType);

    // generate and format the card number, generate the expiry date and CVV
    const cardNumber = formatCardNumber(generateLuhnNumber(cardType));
    const expiryDate = generateExpiryDate();
    const cvv = generateCVV();

    // update the newCard state with the generated card info
    setNewCard((prevState) => ({
      ...prevState,
      cardType,
      cardNumber,
      expiryDate,
      cvv,
    }));
  }

  // handler for form submission
  async function handleAddCard(e) {
    e.preventDefault();

    // Clear any previous messages
    setMessage("");

    // User must acknowledge disclaimer before submitting address
    if (!acknowledgeDisclaimer) {
      setMessage("Please acknowledge the disclaimer before proceeding.");
      return;
    }

    // Get the JWT from local storage
    const token = localStorage.getItem("token");

    try {
      // make the POST request to add the card
      const response = await fetch(
        "http://localhost:3000/api/billing-info/create-card",
        {
          method: "POST",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            ...newCard,
            cvv: newCard.cvv.toString(),
          }),
        }
      );

      // If response isn't okay throw an error and display it
      if (!response.ok) {
        const errorData = await response.json();

        throw new Error(errorData.error);
      }

      // If the request was successful, add the new card to the card array
      const data = await response.json();
      setMessage("Card added successfully!");
      setCardInfo((prevCardInfo) => [...prevCardInfo, newCard]);
      setNewCard({});

      setTimeout(() => {
        setIsCreateCardModalOpen(false);
      }, 1000);
    } catch (err) {
      console.error("Error adding card: ", err);
      setMessage(err.message);
    }
  }

  return (
    <div className="modal-container">
      <div className="create-card-modal-content">
        <div className="create-card-modal-header">
          <h1>Create a new card</h1>
          <button
            className="modal-close"
            onClick={() => setIsCreateCardModalOpen(false)}
          >
            X
          </button>
        </div>
        <div className="message-wrapper">
          {message && <p className="submit-message message">{message}</p>}
        </div>
        <div className="form-wrapper">
          <form onSubmit={handleAddCard} className="card-form">
            <div className="card-form-row ">
              <div className="field">
                <label htmlFor="cardNumber">Card Number</label>
                <div className="input-icon-wrapper">
                  <input
                    id="cardNumber"
                    type="text"
                    value={newCard.cardNumber}
                    disabled
                  />
                  {newCard.cardType === "Visa" && (
                    <FontAwesomeIcon icon={faCcVisa} />
                  )}
                  {newCard.cardType === "MasterCard" && (
                    <FontAwesomeIcon icon={faCcMastercard} />
                  )}
                  {newCard.cardType === "Discover" && (
                    <FontAwesomeIcon icon={faCcDiscover} />
                  )}
                  {newCard.cardType === null && (
                    <FontAwesomeIcon icon={faCreditCard} />
                  )}
                </div>
              </div>
            </div>
            <div className="card-form-row ">
              <div className="field">
                <label htmlFor="expiryDate">Expiry Date</label>
                <div className="input-icon-wrapper">
                  <input
                    id="expiryDate"
                    type="text"
                    value={newCard.expiryDate}
                    disabled
                  />
                  <FontAwesomeIcon icon={faCalendarDays} />
                </div>
              </div>
              <div className="field ">
                <label htmlFor="cvv">CVC/CVV</label>
                <input id="cvv" type="text" value={newCard.cvv} disabled />
              </div>
            </div>
            <div className="card-form-row ">
              <div className="field">
                <label htmlFor="cardHolderName">Card holder name</label>
                <input
                  id="cardHolderName"
                  type="text"
                  value={newCard.cardHolder}
                  disabled
                />
              </div>
            </div>

            <div className="gen-button-wrapper">
              <button
                className="generate-button"
                type="button"
                onClick={generateCard}
              >
                Generate Card
              </button>
            </div>

            <div className="button-wrapper card-submit-wrapper">
              <div className="disclaimer-wrapper">
                <div className="disclaimer-container">
                  <small className="disclaimer">
                    Disclaimer: This site is a portfolio demonstration. It does
                    not process real transactions, and it does not store any
                    real payment or personal information. The "card" you
                    "create" here is purely fictional and generated by the
                    system for demonstration purposes.
                  </small>
                  <label className="checkbox-container">
                    <input
                      type="checkbox"
                      className="hidden-checkbox"
                      checked={acknowledgeDisclaimer}
                      onChange={(e) =>
                        setAcknowledgeDisclaimer(e.target.checked)
                      }
                    />
                    <span className="custom-checkbox">
                      {acknowledgeDisclaimer && (
                        <FontAwesomeIcon icon={faCheck} />
                      )}
                    </span>
                  </label>
                </div>
              </div>
              {isCardGenerated && (
                <button className="submit-button" type="submit">
                  Submit
                </button>
              )}
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default CreateCardModal;
