export const useCardGenerator = (newCard, setNewCard) => {
  // An array containing different card types.
  const cardTypes = ["Visa", "MasterCard", "Discover"];

  /**
   * This function generates a valid card number based on the cardType using the Luhn Algorithm.
   *
   * The Luhn Algorithm, in the context of credit card numbers, serves two main purposes:
   * 1. It adds an extra layer of validation by incorporating a check digit at the end of the card number.
   * 2. It helps avoid simple data entry errors such as transpositions.
   *
   * The Luhn Algorithm is used to validate credit card numbers and operates as follows:
   * 1. Starting from the rightmost digit (excluding the check digit), moving left, double the value of every second digit.
   *    If the result of this doubling operation is greater than 9 (e.g., 8 * 2 = 16), then add the digits of the product (e.g., 16: 1 + 6 = 7).
   * 2. Take the sum of all the digits.
   * 3. If the total ends in zero then the number is valid according to the Luhn formula; otherwise, it is not valid.
   *
   * In this implementation, the cardType informs two aspects of the generated number:
   * - The starting digit(s) which generally signifies the card network. For instance, Visa cards start with 4, MasterCards with 5, and Discover with 6.
   * - The length of the card number. In this case, all generated card numbers are set to have 16 digits.
   */
  function generateLuhnNumber(cardType) {
    // An object that maps cardTypes to their respective lengths.
    const lengths = { Visa: 16, MasterCard: 16, Discover: 16 };

    // An object that maps cardTypes to arrays containing valid starting digits.
    // Visa: Visa cards generated by this function start with 4 and have 16 digits.
    // MasterCard: MasterCard cards generated by this function start with 5 and have 16 digits.
    // Discover: Discover cards generated by this function start with 6 and have 16 digits.
    const starts = { Visa: [4], MasterCard: [5], Discover: [6] };

    // Select a random starting digit for the cardType.
    let start =
      starts[cardType][Math.floor(Math.random() * starts[cardType].length)];

    // Convert the starting digit to a string to allow string concatenation later.
    let card = start.toString();

    // Retrieve the length of card numbers for the cardType.
    const length = lengths[cardType];

    // Generate the main part of the card number (not including the Luhn check digit).
    for (let i = card.length; i < length - 1; i++) {
      card += Math.floor(Math.random() * 10); // add a random digit from 0-9
    }

    // Calculate the Luhn check digit.
    let sum = 0; // stores the running sum
    let parity = length % 2; // checks if the length is odd or even
    for (let i = 0; i < length - 1; i++) {
      let digit = parseInt(card[i]); // get the i-th digit

      // double every other digit, starting with the rightmost (parity indicates where to start)
      if (i % 2 == parity) {
        digit *= 2;
        if (digit > 9) {
          // if the result is two digits, subtract 9
          digit -= 9;
        }
      }
      sum += digit; // add the processed digit to the sum
    }

    // calculate and add the Luhn check digit to the end of the card number
    card += (10 - (sum % 10)) % 10;

    return card; // return the complete card number
  }

  // This function generates a fictional expiry date that is 1 year from the current month.
  function generateExpiryDate() {
    const today = new Date(); // get the current date and time
    const month = ("0" + (today.getMonth() + 1)).slice(-2); // get the current month (0-11), add 1, pad with 0 if necessary
    const year = today.getFullYear().toString().slice(-2); // get the last 2 digits of the current year
    return `${month}/${parseInt(year) + 1}`; // return the expiry date in MM/YY format
  }

  // This function generates a fictional CVV number (3 digits).
  function generateCVV() {
    return Math.floor(100 + Math.random() * 900); // generate a random number from 100-999
  }

  // This function formats a card number by adding a space after every 4 digits.
  function formatCardNumber(cardNumber) {
    return cardNumber.replace(/(\d{4})/g, "$1 ").trim(); // use a regular expression to add spaces, then remove trailing spaces
  }

  // This function generates a new card and updates the newCard state.
  function generateCard() {
    // randomly select a cardType
    const cardType = cardTypes[Math.floor(Math.random() * cardTypes.length)];

    // generate and format the card number, generate the expiry date and CVV
    const cardNumber = formatCardNumber(generateLuhnNumber(cardType));
    const expiryDate = generateExpiryDate();
    const cvv = generateCVV();

    // update the newCard state with the generated card info
    const newCardInfo = {
      ...newCard,
      cardType,
      cardNumber,
      expiryDate,
      cvv,
    };
    setNewCard(newCardInfo);

    return newCardInfo;
  }

  return { generateCard };
};
