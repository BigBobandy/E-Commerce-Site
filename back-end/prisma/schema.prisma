// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// The User model stores information related to individual users
// It has one-to-many relations with ShippingInfo, CardInfo, and Order models
// Meaning that one user can have many of each model associated with them
// Multiple addresses, payment cards, orders etc
model User {
  id                             Int            @id @default(autoincrement())
  firstName                      String
  lastName                       String
  email                          String         @unique
  password                       String?
  emailConfirmationCode          String?
  emailConfirmationCodeCreatedAt DateTime?
  isEmailConfirmed               Boolean        @default(false)
  isGuest                        Boolean        @default(true)
  userUrlString                  String         @unique
  resetPasswordCode              String?
  resetPasswordCodeCreatedAt     DateTime?
  // ShippingInfo stores all the different shipping addresses a user might use
  shippingInfo                   ShippingInfo[]
  // CardInfo stores all the different payment cards a user might use
  cardInfo                       CardInfo[]
  // Orders store the orders placed by the user
  orders                         Order[]
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt
}

// The MenuItem model stores information related to individual menu items
// It has one-to-many relation with the OrderItem model
// Meaning one MenuItem can be part of multiple OrderItems
// So, the same item can be ordered multiple times in different orders. 
model MenuItem {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  category    String
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // OrderItem links a menu item to an order
  orderItems  OrderItem[]
}

// The Order model stores information related to individual orders
// It has one-to-one relation with the User model 
// Meaning each order is associated with one user who placed the order
// and one-to-many relation with the OrderItem model
// Meaning one order can contain multiple items
model Order {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // Each order is linked to a user who placed the order
  userId     Int?
  user       User?       @relation(fields: [userId], references: [id])
  // Each order can contain multiple order items
  orderItems OrderItem[]
  status     String
}

// The OrderItem model represents individual items in an order
// It has one-to-one relations with the MenuItem and Order models
// Meaning each order item is associated with a specific order and a specific menu item
model OrderItem {
  id         Int      @id @default(autoincrement())
  // Link to the menu item being ordered
  menuItemId Int
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  // Link to the order this item belongs to
  orderId    Int
  order      Order    @relation(fields: [orderId], references: [id])
  quantity   Int
}

// The ShippingInfo model stores shipping address information
// It has a one-to-one relation with the User model
// Meaning each address is associated with a specific user
model ShippingInfo {
  id            Int     @id @default(autoincrement())
  address       String
  city          String
  state         String
  stateAbbrev   String?
  zip           String
  country       String
  countryAbbrev String
  // Each shipping address is linked to a user
  userId        Int
  isDefault     Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id])
}

// The CardInfo model stores payment card information
// It has one-to-one relation with the User model
// Meaning each payment card is associated with a specific user
model CardInfo {
  id         Int      @id @default(autoincrement())
  cardNumber String
  expiryDate DateTime
  cvv        String
  cardType   String
  cardHolder String
  // Each card is linked to a user
  userId     Int
  isDefault  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
}
